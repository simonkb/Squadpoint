# Generated by Django 3.2.7 on 2022-01-26 18:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('is_held', models.BooleanField(default=False)),
                ('is_canceled', models.BooleanField(default=False)),
                ('length_time', models.DurationField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=64)),
                ('city', models.CharField(max_length=64)),
                ('subcity', models.CharField(max_length=255)),
                ('landmark', models.CharField(max_length=255)),
                ('houseNumber', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('altText', models.CharField(max_length=255)),
                ('image', models.ImageField(upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('friends', models.ManyToManyField(blank=True, default=None, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SportZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('available_time_from', models.DateTimeField()),
                ('available_time_to', models.DateTimeField()),
                ('available_day_from', models.CharField(max_length=12)),
                ('available_day_to', models.CharField(max_length=12)),
                ('favorites', models.ManyToManyField(blank=True, related_name='user_favorites', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='Squadpoint.location')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('photos', models.ManyToManyField(blank=True, default=None, to='Squadpoint.Photo')),
            ],
        ),
        migrations.CreateModel(
            name='Sport_court',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24)),
                ('max_num_people', models.PositiveIntegerField(default=4)),
                ('payment_rate_per_hour', models.FloatField()),
                ('is_booked', models.BooleanField(default=False)),
                ('photos', models.ManyToManyField(blank=True, to='Squadpoint.Photo')),
                ('sport_zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sport_courts', to='Squadpoint.sportzone')),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=255)),
                ('is_read', models.BooleanField(default=False)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numberParticipants', models.PositiveIntegerField()),
                ('winner_team', models.CharField(blank=True, max_length=255)),
                ('is_draw', models.BooleanField(default=False)),
                ('score', models.PositiveIntegerField(default=0)),
                ('starts', models.DateTimeField()),
                ('ends', models.DateTimeField()),
                ('duration', models.DurationField()),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='Squadpoint.booking')),
                ('teamA_members', models.ManyToManyField(related_name='matches_where_user_is_in_A', to=settings.AUTH_USER_MODEL)),
                ('teamB_members', models.ManyToManyField(related_name='matches_where_user_is_in_B', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='booking',
            name='creater',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='booking',
            name='participants',
            field=models.ManyToManyField(blank=True, related_name='participated_bookings', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='booking',
            name='sport_courts',
            field=models.ManyToManyField(related_name='bookings', to='Squadpoint.Sport_court'),
        ),
        migrations.AddField(
            model_name='booking',
            name='sport_zone',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='Squadpoint.sportzone'),
        ),
    ]
